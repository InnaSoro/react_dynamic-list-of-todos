{"version":3,"sources":["components/TodoList/TodoList.jsx","api/todos.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","value","handleChange","event","setState","target","this","props","todos","selectUser","selectedUserId","changeCompleted","selectedTodos","filter","todo","completed","Boolean","className","onChange","map","key","id","type","checked","title","classNames","userId","onClick","React","Component","BASE_URL","CurrentUser","selectedUser","loadUser","prevProps","a","fetch","then","response","json","data","clearSelection","name","email","phone","App","todoId","isCompleted","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.82218e93.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    value: 'all',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n  }\n\n  render() {\n    const { todos, selectUser, selectedUserId, changeCompleted } = this.props;\n    const { value } = this.state;\n    const selectedTodos = todos.filter(todo => (\n      value !== 'all'\n        ? todo.completed === Boolean(+value)\n        : todo\n    ));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <select\n          className=\"TodoList__filter\"\n          value={value}\n          onChange={this.handleChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"0\">Active</option>\n          <option value=\"1\">Completed</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {selectedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={`\n              TodoList__item\n              ${todo.completed === false\n                  ? 'TodoList__item--unchecked'\n                  : 'TodoList__item--checked'}\n              `}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => changeCompleted(todo.id)}\n                    // readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected':\n                      todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n};\n","// eslint-disable-next-line\nconst BASE_URL = `https://mate-api.herokuapp.com`;\r\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n}\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json())\n    .then(response => response.data.filter(todo => todo.userId));\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/todos';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUser: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    await getUser(this.props.userId)\n      .then((selectedUser) => {\n        this.setState({ selectedUser });\n      });\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n    const { clearSelection } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {selectedUser.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n        <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n        <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n        <button\n          className=\"button CurrentUser__clear\"\n          type=\"button\"\n          onClick={clearSelection}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelection: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/todos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    await getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  clearSelection = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  changeCompleted = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        const isCompleted = todo.completed;\n\n        return (\n          todo.id === todoId\n            ? {\n              ...todo, completed: !isCompleted,\n            }\n            : todo\n        );\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            changeCompleted={this.changeCompleted}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelection={this.clearSelection}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}