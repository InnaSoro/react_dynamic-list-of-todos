{"version":3,"sources":["components/TodoList/TodoList.jsx","api/todos.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","value","search","handleChange","event","setState","target","name","this","props","todos","selectUser","selectedUserId","changeCompleted","selectedTodos","filter","todo","completed","Boolean","title","includes","className","class","onChange","type","placeholder","id","for","map","key","checked","classNames","userId","onClick","React","Component","BASE_URL","CurrentUser","selectedUser","loadUser","prevProps","a","fetch","then","response","json","data","clearSelection","email","phone","App","todoId","isCompleted","ReactDOM","render","document","getElementById"],"mappings":"4ZAKaA,EAAb,4MACEC,MAAQ,CACNC,MAAO,MACPC,OAAQ,IAHZ,EAMEC,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAME,OAAOC,KAAOH,EAAME,OAAOL,SARxC,4CAYE,WAAU,IAAD,EACwDO,KAAKC,MAA5DC,EADD,EACCA,MAAOC,EADR,EACQA,WAAYC,EADpB,EACoBA,eAAgBC,EADpC,EACoCA,gBADpC,EAEmBL,KAAKR,MAAvBC,EAFD,EAECA,MAAOC,EAFR,EAEQA,OACTY,EAAgBJ,EAAMK,QAAO,SAAAC,GAAI,MAC3B,QAAVf,EACIe,EAAKC,YAAcC,SAASjB,IAAUe,EAAKG,MAAMC,SAASlB,GAC1Dc,GAAQA,EAAKG,MAAMC,SAASlB,MAGlC,OACE,yBAAKmB,UAAU,YACb,sCACA,yBAAKC,MAAM,qBACT,2BACErB,MAAOC,EACPqB,SAAUf,KAAKL,aACfqB,KAAK,QACLF,MAAM,cACNG,YAAY,OACZlB,KAAK,SACLmB,GAAG,WAEL,2BACEC,IAAI,SACJL,MAAM,eAFR,WAOF,4BACED,UAAU,mBACVd,KAAK,QACLN,MAAOA,EACPsB,SAAUf,KAAKL,cAEf,4BAAQF,MAAM,OAAd,OACA,4BAAQA,MAAM,KAAd,UACA,4BAAQA,MAAM,KAAd,cAEF,yBAAKoB,UAAU,4BACb,wBAAIA,UAAU,kBACXP,EAAcc,KAAI,SAAAZ,GAAI,OACrB,wBACEa,IAAKb,EAAKU,GACVL,UAAS,yDAEU,IAAnBL,EAAKC,UACD,4BACA,0BAJK,qBAOT,+BACE,2BACEO,KAAK,WACLM,QAASd,EAAKC,UACdM,SAAU,kBAAMV,EAAgBG,EAAKU,OAGvC,2BAAIV,EAAKG,QAGX,4BACEE,UAAWU,IACT,wBACA,SACA,CAAE,kCACAf,EAAKgB,SAAWpB,IAEpBY,KAAK,SACLS,QAAS,kBAAMtB,EAAWK,EAAKgB,UARjC,YAWGhB,EAAKgB,mBApFxB,GAA8BE,IAAMC,WCJ9BC,G,MAAQ,kCCIP,IAAMC,EAAb,4MACErC,MAAQ,CACNsC,aAAc,IAFlB,uDAKE,WACE9B,KAAK+B,aANT,gCASE,SAAmBC,GACbA,EAAUR,SAAWxB,KAAKC,MAAMuB,QAClCxB,KAAK+B,aAXX,6DAeE,iCAAAE,EAAA,uEDjBsBT,ECkBNxB,KAAKC,MAAMuB,ODjBpBU,MAAM,GAAD,OAAIN,EAAJ,kBAAsBJ,IAC/BW,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIA,EAASE,SCgBxBH,MAAK,SAACL,GACL,EAAKjC,SAAS,CAAEiC,oBAHtB,iCDjBK,IAAiBN,ICiBtB,YAfF,0EAsBE,WAAU,IACAM,EAAiB9B,KAAKR,MAAtBsC,aACAS,EAAmBvC,KAAKC,MAAxBsC,eAER,OACE,yBAAK1B,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEGiB,EAAaZ,KAIlB,wBAAIL,UAAU,qBAAqBiB,EAAa/B,MAChD,uBAAGc,UAAU,sBAAsBiB,EAAaU,OAChD,uBAAG3B,UAAU,sBAAsBiB,EAAaW,OAChD,4BACE5B,UAAU,4BACVG,KAAK,SACLS,QAASc,GAHX,cAtCR,GAAiCb,IAAMC,WCsExBe,E,4MAnEblD,MAAQ,CACNU,MAAO,GACPE,eAAgB,G,EAYlBD,WAAa,SAACC,GACZ,EAAKP,SAAS,CAAEO,oB,EAGlBmC,eAAiB,WACf,EAAK1C,SAAS,CAAEO,eAAgB,K,EAGlCC,gBAAkB,SAACsC,GACjB,EAAK9C,UAAS,SAAAL,GAAK,MAAK,CACtBU,MAAOV,EAAMU,MAAMkB,KAAI,SAACZ,GACtB,IAAMoC,EAAcpC,EAAKC,UAEzB,OACED,EAAKU,KAAOyB,EAAZ,2BAEOnC,GAFP,IAEaC,WAAYmC,IAErBpC,U,8FA3BZ,iCAAAyB,EAAA,sEFHOC,MAAM,GAAD,OAAIN,EAAJ,YACTO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAQ,OAAIA,EAASE,KAAK/B,QAAO,SAAAC,GAAI,OAAIA,EAAKgB,aEGjDW,MAAK,SAACjC,GACL,EAAKL,SAAS,CACZK,aAJR,2C,0EAiCA,WAAU,IAAD,EAC2BF,KAAKR,MAA/BU,EADD,EACCA,MAAOE,EADR,EACQA,eAEf,OACE,yBAAKS,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEX,MAAOA,EACPC,WAAYH,KAAKG,WACjBC,eAAgBA,EAChBC,gBAAiBL,KAAKK,mBAI1B,yBAAKQ,UAAU,gBACb,yBAAKA,UAAU,0BACZT,EACC,kBAAC,EAAD,CACEoB,OAAQpB,EACRmC,eAAgBvC,KAAKuC,iBAErB,0B,GA5DEb,IAAMC,WCHxBkB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.649cbf3b.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.Component {\n  state = {\n    value: 'all',\n    search: '',\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  render() {\n    const { todos, selectUser, selectedUserId, changeCompleted } = this.props;\n    const { value, search } = this.state;\n    const selectedTodos = todos.filter(todo => (\n      value !== 'all'\n        ? todo.completed === Boolean(+value) && todo.title.includes(search)\n        : todo && todo.title.includes(search)\n    ));\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div class=\"form__group field\">\n          <input\n            value={search}\n            onChange={this.handleChange}\n            type=\"input\"\n            class=\"form__field\"\n            placeholder=\"Name\"\n            name=\"search\"\n            id='search'\n          />\n          <label\n            for=\"search\"\n            class=\"form__label\"\n          >\n            Search\n          </label>\n        </div>\n        <select\n          className=\"TodoList__filter\"\n          name=\"value\"\n          value={value}\n          onChange={this.handleChange}\n        >\n          <option value=\"all\">All</option>\n          <option value=\"0\">Active</option>\n          <option value=\"1\">Completed</option>\n        </select>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {selectedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={`\n              TodoList__item\n              ${todo.completed === false\n                  ? 'TodoList__item--unchecked'\n                  : 'TodoList__item--checked'}\n              `}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    onChange={() => changeCompleted(todo.id)}\n                    // readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button',\n                    'button',\n                    { 'TodoList__user-button--selected':\n                      todo.userId === selectedUserId },\n                  )}\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n  changeCompleted: PropTypes.func.isRequired,\n};\n","// eslint-disable-next-line\nconst BASE_URL = `https://mate-api.herokuapp.com`;\r\n\nexport function getUser(userId) {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json())\n    .then(response => response.data);\n}\n\nexport function getTodos() {\n  return fetch(`${BASE_URL}/todos/`)\n    .then(response => response.json())\n    .then(response => response.data.filter(todo => todo.userId));\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/todos';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    selectedUser: {},\n  }\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadUser();\n    }\n  }\n\n  async loadUser() {\n    await getUser(this.props.userId)\n      .then((selectedUser) => {\n        this.setState({ selectedUser });\n      });\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n    const { clearSelection } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {selectedUser.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n        <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n        <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n        <button\n          className=\"button CurrentUser__clear\"\n          type=\"button\"\n          onClick={clearSelection}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelection: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/todos';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    await getTodos()\n      .then((todos) => {\n        this.setState({\n          todos,\n        });\n      });\n  }\n\n  selectUser = (selectedUserId) => {\n    this.setState({ selectedUserId });\n  }\n\n  clearSelection = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  changeCompleted = (todoId) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        const isCompleted = todo.completed;\n\n        return (\n          todo.id === todoId\n            ? {\n              ...todo, completed: !isCompleted,\n            }\n            : todo\n        );\n      }),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n            changeCompleted={this.changeCompleted}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelection={this.clearSelection}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}